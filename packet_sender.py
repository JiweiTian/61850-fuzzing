from scapy.all import *
from pathlib import Path
from argparse import ArgumentParser
from boofuzz import Target, SocketConnection, Session


def setup_argparse():
    parser = ArgumentParser(description='Send a original or mutated packet to a target')

    parser.add_argument('--path', '-p', help='Path to the packet')
    parser.add_argument('--original', action='store_true', help='send original goose instead of created one')
    parser.add_argument('--protocol', help='Specify the protocol of which you want to sent a packet', choices=['sv', 'goose', 'mms'], required=True)
    parser.add_argument('--host', type=str, help='target host to which we are sending the packet')
    parser.add_argument('--port', type=int, help='target port to which we are sending the packet')
    return parser.parse_args()


def get_crashing_pck(path):

    p = Path(path)

    with open(p, "rb") as bin_pck:
        crashing_pck = bin_pck.read()

    return crashing_pck


def get_original__pck(protocol):

    if protocol == 'goose':
        original_pck = (b"\x01\x0c\xcd\x01\x00\x01\x00\x00\x00\x00\x00\x00\x81\x00\x80\x00"
                        b"\x88\xb8\x03\xe8\x00\xb7\x00\x00\x00\x00\x61\x81\xac\x80\x29\x73"
                        b"\x69\x6d\x70\x6c\x65\x49\x4f\x47\x65\x6e\x65\x72\x69\x63\x49\x4f"
                        b"\x2f\x4c\x4c\x4e\x30\x24\x47\x4f\x24\x67\x63\x62\x41\x6e\x61\x6c"
                        b"\x6f\x67\x56\x61\x6c\x75\x65\x73\x81\x01\x00\x82\x23\x73\x69\x6d"
                        b"\x70\x6c\x65\x49\x4f\x47\x65\x6e\x65\x72\x69\x63\x49\x4f\x2f\x4c"
                        b"\x4c\x4e\x30\x24\x41\x6e\x61\x6c\x6f\x67\x56\x61\x6c\x75\x65\x73"
                        b"\x83\x29\x73\x69\x6d\x70\x6c\x65\x49\x4f\x47\x65\x6e\x65\x72\x69"
                        b"\x63\x49\x4f\x2f\x4c\x4c\x4e\x30\x24\x47\x4f\x24\x67\x63\x62\x41"
                        b"\x6e\x61\x6c\x6f\x67\x56\x61\x6c\x75\x65\x73\x84\x08\x5e\x7c\xc3"
                        b"\x69\xe1\xca\xc0\x0a\x85\x01\x01\x86\x01\x00\x87\x01\x00\x88\x01"
                        b"\x01\x89\x01\x00\x8a\x01\x03\xab\x10\x85\x02\x04\xd2\x8c\x06\x00"
                        b"\x00\x00\x00\x00\x00\x85\x02\x16\x2e")
        return original_pck

    elif protocol == 'sv':
        original_pck = (b"\x01\x0c\xcd\x01\x00\x01\x00\x00\x00\x00\x00\x00\x81\x00\x80\x00"
                        b"\x88\xba\x40\x00\x00\x61\x00\x00\x00\x00\x60\x57\x80\x01\x02\xa2"
                        b"\x52\x30\x27\x80\x06\x73\x76\x70\x75\x62\x31\x82\x02\x00\x01\x83"
                        b"\x04\x00\x00\x00\x01\x85\x01\x00\x87\x10\x44\x9a\x52\x2b\x3d\xfc"
                        b"\xd3\x5b\x5e\x7d\xee\x19\x5e\x35\x3f\x00\x30\x27\x80\x06\x73\x76"
                        b"\x70\x75\x62\x32\x82\x02\x00\x01\x83\x04\x00\x00\x00\x01\x85\x01"
                        b"\x00\x87\x10\x45\x1a\x52\x2b\x3e\x7c\xd3\x5b\x5e\x7d\xee\x19\x5e"
                        b"\x35\x3f\x00")
        return original_pck

    elif protocol == 'mms':
        original_pck = (b"\x03\x00\x00\xbb\x02\xf0\x80\x0d\xb2\x05\x06\x13\x01\x00\x16\x01"
                        b"\x02\x14\x02\x00\x02\x33\x02\x00\x01\x34\x02\x00\x01\xc1\x9c\x31"
                        b"\x81\x99\xa0\x03\x80\x01\xca\xdf\x60\x3e\xdc\xfa\x0c\x5c\x8d\x4e"
                        b"\xa1\xf8\x47\xbc\x64\x9c\x37\xca\x78\x70\x5b\x1c\xd5\xb7\x13\xc8"
                        b"\x32\x85\xa0\x45\x9c\x81\x39\x05\x4e\x5f\x18\x8c\x57\x55\x91\xe6"
                        b"\xc9\xd3\x97\xbf\xba\x63\x1b\xca\x10\x88\x41\xb5\xc8\xce\xbf\x9d"
                        b"\xf6\xdb\x6b\x71\x48\xfe\x36\xbf\xea\x7f\x1e\x86\x70\x6d\x27\xad"
                        b"\x00\x5f\xa5\x3b\x6b\x11\xe9\x12\x46\x2c\xde\x79\xdb\x43\xf2\xa4"
                        b"\x27\x06\x0f\xdb\xfd\x97\x54\xe8\x49\x52\x30\x5c\xa2\x81\x91\x81"
                        b"\x04\x00\x00\x00\x01\x82\x04\x00\x00\x00\x01\xa4\x23\x30\x0f\x02"
                        b"\x01\x01\x06\x04\x52\x01\x00\x01\x30\x04\x06\x02\x51\x01\x30\x10"
                        b"\x02\x01\x03\x06\x05\x28\xca\x22\x02\x01\x30\x04\x06\x02\x51\x01"
                        b"\x61\x5e\x30\x5c\x02\x01\x01\xa0\x57\x60\x55\xa1\x07\x06\x05\x28"
                        b"\xca\x22\x02\x03\xa2\x07\x06\x05\x29\x01\x87\x67\x01\xa3\x03\x02"
                        b"\x01\x0c\xa6\x06\x06\x04\x29\x01\x87\x67\xa7\x03\x02\x01\x0c\xbe"
                        b"\x2f\x28\x2d\x02\x01\x03\xa0\x28\xa8\x26\x80\x03\x00\xfd\xe8\x81"
                        b"\x01\x05\x82\x01\x05\x83\x01\x0a\xa4\x16\x80\x01\x01\x81\x03\x05"
                        b"\xf1\x00\x82\x0c\x03\xee\x1c\x00\x00\x04\x08\x00\x00\x79\xef\x18")

        return original_pck


def main():
    arguments = setup_argparse()

    if arguments.original:
        data = get_original__pck(arguments.protocol)

    elif arguments.path:
        data = get_crashing_pck(arguments.path)

    else:
        print("You have to specify a path to the packet to be send or choose to send an original packet")
        sys.exit()

    if arguments.host and arguments.port:
        target = Target(
            connection=SocketConnection(arguments.host, arguments.port, proto='tcp'))
        session = Session(target=target, check_data_received_each_request=True, keep_web_open=False)
        target.open()
        target.send(data)
        target.close()
    else:
        sendp(data, iface="lo")


if __name__ == '__main__':
    main()
